#
# Olimex ARM-USB-TINY-H
#
# http://www.olimex.com/dev/arm-usb-tiny-h.html
#
adapter_khz 30000



interface ftdi
transport select jtag
ftdi_tdo_sample_edge falling

reset_config none
ftdi_device_desc "Olimex OpenOCD JTAG ARM-USB-TINY-H"
ftdi_vid_pid 0x15ba 0x002a

ftdi_layout_init 0x0808 0x0a1b
ftdi_layout_signal nSRST -oe 0x0200
ftdi_layout_signal nTRST -data 0x0100 -oe 0x0100
ftdi_layout_signal LED -data 0x0800


if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME riscv
}

if { [info exists CPUTAPID ] } {
   set _CPUTAPID $CPUTAPID
} else {
   set _CPUTAPID 0x04f5484d
}

jtag newtap $_CHIPNAME tap -irlen 6 -expected-id $_CPUTAPID
set _TARGETNAME $_CHIPNAME.tap
target create $_TARGETNAME.0 riscv -chain-position $_TARGETNAME -rtos hwthread

# # Configure work area in on-chip SRAM
# $_TARGETNAME.0 configure -work-area-phys 0x80000000 -work-area-size 1000 -work-area-backup 0

# This chip implements system bus access, use it.
# Accessing the memory through the system bus is faster than through
# instruction feeding.
# riscv set_mem_access sysbus
riscv set_prefer_sba on
riscv set_command_timeout_sec 120
# Be verbose about GDB errors
gdb_report_data_abort enable
gdb_report_register_access_error enable

# Always use hardware breakpoints. Since we don't use `flash bank` commands,
# OpenOCD won't provide a memory map to GDB. This means that GDB isn't be aware
# that the code resides in a read-only memory, and therefore should use hardware
# breakpoints. This setting makes OpenOCD convert the software breakpoints into
# hardware ones.
gdb_breakpoint_override hard

